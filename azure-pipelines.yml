trigger:
  branches:
    include:
      - main
      - development
  paths:
    exclude:
      - README.md
      - docs/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isDev: $[eq(variables['Build.SourceBranch'], 'refs/heads/development')]
  vercelDeployHookUrl: 'https://api.vercel.com/v1/integrations/deploy/prj_nGWbvHmsJE1l8RUN3KM34qCnFIRP/kkA5kxz29L'
  imageName: 'system-transport'

stages:

# CI: Lint, Test, Build
- stage: BuildAndTest
  displayName: 'Build & Test'
  jobs:
    - job: CI
      displayName: 'Lint, Test, Build'
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: 'Install Node.js'

        - script: |
            npm install -g pnpm
            pnpm --version
          displayName: 'Install pnpm'

        - script: |
            echo "üßº Clean project"
            rm -rf node_modules .next
          displayName: 'Clean Workspace'

        - script: |
            echo "üì¶ Installing dependencies"
            pnpm install --no-frozen-lockfile

          displayName: 'Install Dependencies'

        - script: |
            echo "üîç Linting"
            pnpm lint
          displayName: 'Run ESLint'

        - script: |
            echo "üß™ Running unit tests"
            pnpm test:ci
          displayName: 'Run Jest Tests'

        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/junit.xml'
            mergeTestResults: true
            testRunTitle: 'Unit Tests'
          displayName: 'Publish Test Results'
          condition: succeededOrFailed()

        - script: |
            echo "üèóÔ∏è Build Next.js"
            pnpm build
          displayName: 'Build App'

# Docker Build
- stage: Docker
  displayName: 'Build Docker Image (Local)'
  dependsOn: BuildAndTest
  condition: succeeded()
  jobs:
    - job: BuildDocker
      displayName: 'Build Docker Image'
      steps:
        - script: |
            echo "üê≥ Building Docker image..."
            docker build -t $(imageName):$(Build.BuildId) -f Dockerfile .
            docker images
          displayName: 'Build Docker Image Locally'

# Deploy to Vercel
- stage: DeployToVercel
  displayName: 'Deploy to Vercel'
  dependsOn: Docker
  condition: and(succeeded(), eq(variables.isMain, true))
  jobs:
    - job: TriggerVercel
      displayName: 'Trigger Vercel Deploy Hook'
      steps:
        - script: |
            echo "üöÄ Triggering Vercel deployment..."
            curl -X POST $(vercelDeployHookUrl)
          displayName: 'Call Vercel Hook'

# Monitoring Placeholder
- stage: Monitoring
  displayName: 'Monitoring & Logging'
  dependsOn: DeployToVercel
  condition: succeeded()
  jobs:
    - job: SetupMonitoring
      displayName: 'Monitoring Setup'
      steps:
        - script: |
            echo "üì° Placeholder: Setup Monitoring"
            mkdir -p $(Build.ArtifactStagingDirectory)/monitoring
            echo "# Prometheus Config Placeholder" > $(Build.ArtifactStagingDirectory)/monitoring/prometheus.yml
            echo "scrape_configs:" >> $(Build.ArtifactStagingDirectory)/monitoring/prometheus.yml
            echo "  - job_name: 'system-transport'" >> $(Build.ArtifactStagingDirectory)/monitoring/prometheus.yml
            echo "    static_configs:" >> $(Build.ArtifactStagingDirectory)/monitoring/prometheus.yml
            echo "      - targets: ['localhost:3000']" >> $(Build.ArtifactStagingDirectory)/monitoring/prometheus.yml
          displayName: 'Configure Monitoring'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/monitoring'
            ArtifactName: 'monitoring-config'
            publishLocation: 'Container'
          displayName: 'Publish Monitoring Config'

# Documentation
- stage: Documentation
  displayName: 'CI/CD Documentation'
  dependsOn: []
  condition: succeeded()
  jobs:
    - job: Doc
      displayName: 'Document Steps'
      steps:
        - script: |
            echo "üìö Documentation de la CI/CD"
            echo "1. ‚úÖ Lint & Tests"
            echo "2. üß± Build App"
            echo "3. üê≥ Docker Image locale"
            echo "4. üöÄ D√©ploiement Vercel via Hook"
            echo "5. üì° Monitoring Placeholder"
            echo ""
            echo "D√©clench√© depuis: $(Build.SourceBranch)"
            echo "D√©ploiement Vercel: $(vercelDeployHookUrl)"
          displayName: 'Log Documentation'
