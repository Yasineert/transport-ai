# Option 1: Pipeline avec déploiement sur Vercel
trigger:
  branches:
    include:
      - main
      - development
  paths:
    exclude:
      - README.md
      - docs/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isDev: $[eq(variables['Build.SourceBranch'], 'refs/heads/development')]

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        echo "Setting up Node.js environment"
        node -v
        npm -v
        npm install -g pnpm
        pnpm --version
      displayName: 'Install pnpm'

    - script: |
        echo "Installing project dependencies"
        rm -rf node_modules
        rm -rf .next
        pnpm install --frozen-lockfile
      displayName: 'Install Dependencies'
      
    - script: |
        echo "Running ESLint for code quality"
        pnpm lint
      displayName: 'Run ESLint'
      continueOnError: false

    - script: |
        echo "Running Jest unit tests"
        pnpm test:ci
      displayName: 'Run Jest Tests'
      continueOnError: false
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit.xml'
        mergeTestResults: true
        testRunTitle: 'Unit Tests'
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()

    - script: |
        echo "Building Next.js application"
        pnpm build
      displayName: 'Build Application'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '.next'
        ArtifactName: 'next-build'
        publishLocation: 'Container'
      displayName: 'Publish Next.js Build'

- stage: DeployVercel
  displayName: 'Deploy to Vercel'
  dependsOn: Build
  condition: and(succeeded(), eq(variables.isMain, true))
  jobs:
  - job: DeployToVercel
    displayName: 'Deploy to Vercel'
    steps:
    - checkout: self
    
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
    
    - script: |
        npm install -g vercel
        echo "Deploying to Vercel..."
        vercel --token $(VERCEL_TOKEN) --prod --yes
      displayName: 'Deploy to Vercel'
      env:
        VERCEL_TOKEN: $(VERCEL_TOKEN)
        VERCEL_ORG_ID: $(VERCEL_ORG_ID)
        VERCEL_PROJECT_ID: $(VERCEL_PROJECT_ID)

---

# Option 2: Pipeline avec déploiement sur Netlify
trigger:
  branches:
    include:
      - main
      - development

pool:
  vmImage: 'ubuntu-latest'

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        npm install -g pnpm
        pnpm install --frozen-lockfile
      displayName: 'Install Dependencies'
      
    - script: pnpm lint
      displayName: 'Run ESLint'

    - script: pnpm test:ci
      displayName: 'Run Tests'
    
    - script: pnpm build
      displayName: 'Build Application'

    - script: |
        npm install -g netlify-cli
        netlify deploy --prod --dir=out --auth=$(NETLIFY_AUTH_TOKEN) --site=$(NETLIFY_SITE_ID)
      displayName: 'Deploy to Netlify'
      condition: and(succeeded(), eq(variables.isMain, true))

---

# Option 3: Pipeline simple (Build et Test uniquement)
trigger:
  branches:
    include:
      - main
      - development

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: BuildTest
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        echo "Installing dependencies"
        npm install -g pnpm
        pnpm install --frozen-lockfile
      displayName: 'Install Dependencies'
      
    - script: |
        echo "Running code quality checks"
        pnpm lint
      displayName: 'Run ESLint'

    - script: |
        echo "Running unit tests"
        pnpm test:ci
      displayName: 'Run Tests'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit.xml'
        mergeTestResults: true
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()

    - script: |
        echo "Building application"
        pnpm build
      displayName: 'Build Application'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '.next'
        ArtifactName: 'build-artifacts'
        publishLocation: 'Container'
      displayName: 'Publish Build Artifacts'

- stage: Documentation
  displayName: 'Generate Documentation'
  dependsOn: []
  jobs:
  - job: GenerateDoc
    steps:
    - script: |
        echo "CI/CD Pipeline Documentation"
        echo "=========================="
        echo "Build Status: Success"
        echo "Tests: Passed"
        echo "Artifacts: Published"
        echo "Ready for manual deployment"
      displayName: 'Pipeline Summary'